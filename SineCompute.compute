// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CalculateSineWave

RWStructuredBuffer<float3> waveBuffer;
uint waveBufferLength;
float amplitude = 1.1; // Height of the wave
float frequency = 1.2; // Number of waves in a given space
float speed = 1.3; // Controls wave speed
float time;

[numthreads(1024, 1, 1)]
void CalculateSineWave (uint3 id : SV_DispatchThreadID) {
    if (id.x >= waveBufferLength) return; // Return early if the threads wants to access data outside of the buffer
    
    float3 position = waveBuffer[id.x]; // Retrieve the data point (a float3) from the buffer
    float test = position.x  + position.y + position.z; // Do some extra calculation with the data to make it heavier to compute

    // Put some data back into the compute buffer and do simple calculations to make it heavier
    waveBuffer[id.x].x = test * 0.51;
    waveBuffer[id.x].y = amplitude * sin(frequency * id.x * 0.1f + time * speed) + test;
    waveBuffer[id.x].z = test * 0.253;
}
